[31mError: PROG already exists
[0mBASIC class(Object)>>error:
BASIC class(Class)>>rename:
RBRenameClassChange>>executeNotifying:
RBRenameClassChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[0m[31mError: PROG already exists
[0mBASIC class(Object)>>error:
BASIC class(Class)>>rename:
RBRenameClassChange>>executeNotifying:
RBRenameClassChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "asNautilusSelection" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updateBothView
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
WeakAnnouncementSubscription>>deliver: in Block: [ action cull: anAnnouncement cull: announcer ]
BlockClosure>>on:do:
BlockClosure>>on:fork: in Block: [ Processor terminateActive ]
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
HandMorph>>sendFocusEvent:to:clear: in Block: [ ...
BlockClosure>>on:do:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
PluggableButtonMorph>>mouseUp: in Block: [ :m | ...
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
ButtonModel>>performAction
MorphicButtonAdapter>>action
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
ChangesBrowser>>accept
ChangesBrowser>>initializeAcceptButton in Block: [ self accept ]
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
ChangesBrowser>>accept in Block: [ :change | RBRefactoryChangeManager instance perf...etc...
OrderedCollection>>do:
[0m[31mMessageNotUnderstood: receiver of "includesSelector:" is nil
[0mUndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #includesSelector:
RBAddMethodChange>>asUndoOperation
RBAddMethodChange(RBRefactoryClassChange)>>executeNotifying:
RBAddMethodChange(RBRefactoryChange)>>execute
RBRefactoryChangeManager>>performChange: in Block: [ self addUndo: aRefactoringChange execute ]
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[0m[31mMessageNotUnderstood: AnObsoletePROG>>addVariables:in:
[0mAnObsoletePROG(Object)>>doesNotUnderstand: #addVariables:in:
PracticaTest>>testVariableBinding
PracticaTest(TestCase)>>performTest
PracticaTest(TestCase)>>runCase in Block: [ ...
BlockClosure>>ensure:
PracticaTest(TestCase)>>runCase
PracticaTest(TestCase)>>debug in Block: [ (self class selector: testSelector) runCase ]
BlockClosure>>ensure:
PracticaTest(TestCase)>>debug
PracticaTest class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority: in Block: [ ...
BlockClosure>>newProcess in Block: [ ...
[0m[31mMessageNotUnderstood: AnObsoletePROG>>addVariables:in:
[0mAnObsoletePROG(Object)>>doesNotUnderstand: #addVariables:in:
PracticaTest>>testVariableBinding
PracticaTest(TestCase)>>performTest
PracticaTest(TestCase)>>runCase in Block: [ ...
BlockClosure>>ensure:
PracticaTest(TestCase)>>runCase
PracticaTest(TestCase)>>debug in Block: [ (self class selector: testSelector) runCase ]
BlockClosure>>ensure:
PracticaTest(TestCase)>>debug
PracticaTest class(TestCase class)>>debug:
PackageTreeNautilusUI(NautilusUI)>>runTestForAMethod:notifying:priority: in Block: [ ...
BlockClosure>>newProcess in Block: [ ...
[0m